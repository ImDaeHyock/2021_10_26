#!/usr/bin/env python
# coding: utf-8

# cell을 선택 후 키보드에서 'm'을 누르면 markdown이 되고 다시 'y'를 누르면 code가 된다.

# cell을 선택한 후 'a'를 누르면 해당 cell 앞에 새 cell이 삽입되고,

#  cell을 선택한 후 'b'를 누르면 해당 cell 뒤에 새 cell이 삽입된다.
# 

# Jupyter notebook에서 실행 가능한 확장자는 '.jpynb'이다.
# 
# 일반 파일 확장자는 '.py'이다.

# 1. 사람이 이해하기 쉬운 '프로그래밍 언어'를 '코드 실행기'를 통해 컴퓨터가 사람이 입력한 명령을 수행할 수 있도록 한다. 

# 2. Python의 특징\
#   1) 직관적이고 쉽다. \
#   2) 대부분의 운영체제에서 동일하게 사용된다\
#   3) 상대적으로 실행에서 좀 느리다.\
#   4) 대소문자를 구분한다.
#   
#  

# 3. Notebook에서 'Ctrl+\' : 주석 on/ off 기능을 수행한다.

# 표현식: 어떠한 값을 만들어내는 간단한 코드, 표현식 1개 이상이 모인 것을 '문장'이라고 한다.\
# \
# 이 문장들이 모인 것을 '프로그램'이라고 한다.

# In[16]:


#파이썬의 키워드를 알아봅니다.
import keyword
print(keyword.kwlist)


# 식별자: 프로그래밍 언어에서 이름을 붙일 때 사용하는 단어. 변수 또는 함수 이름 등에 사용.
#   1) 키워드를 사용하면 안됨\
#   2) 특수 문자는 '_(언더바)'만 허용됨\
#   3) 숫자로 시작하면 안됨\
#   4) 공백을 포함할 수 없다.
#   
#   
#   *Snake case\
#    띄어쓰기가 안되 읽기 어려움이 있어 \
#    'itemlist >> item_list' 와 같이 활용하는 방법
#    
#    **Camel case\
#     띄워쓰기가 안되 읽기 어려우니\
#     'itemlist >> ItemList'와 같이 표기하는 방법이다\
#     (식별자로 사용하려면 대문자로 시작하는 camel case여야한다.)

# In[15]:


#출력, print()
print("Hello Python!,","it is 1st time.")
print(1)
print()             #괄호 안에 아무 것도 없다면 출력시 줄바꿈만 된다.
print("안녕하세요?\n반가워요!")   #  \n을 사이에 넣어 출력시 줄바꿈
print("처음이라\t\t\t\t멀고 낯선거예요") # \t를 넣어 출력시 탭이 됨.
print()
print("""계속 줄바꿈하기 위해 입력하기 귀찮으니
큰 따옴표 세 개를 연속해서 사용하면 
사용자가 괄호안에 적으며 줄 바꾼 내용 그대로 출력이 됩니다.""")


# In[39]:


#연산자
print("좋은"+"오후입니다")   # + 연산자는 문자에서 사용가능하다. 각각의 문장을 이어준다
print("좋은"+" 오후입니다")
print("힘내자! "*3)           # 문자에 * 연산자를 사용하면 해당 문자를 입력한 숫자만큼 반복해서 출력
#문자 선택 연산자 '인덱싱{[]}'
str = "abcdefghijk"
print(str[0], str[2], str[-1], str[1:4], str[-4:-1])

#문자열 길이구하기
a = len(str)
print(a)


# In[45]:


#숫자 2개 입력 받아서 덧셈한 경우와 뺄셈한 경우를 출력,
#이후 문자 입력을 받아 처음 입력된 숫자만큼 반복

number_1 = int(input("숫자 입력:"))
number_2 = int(input("숫자 입력:"))
print(number_1+number_2, number_1-number_2)
b = input("문자열 입력:")
print(b*number_1)


# In[ ]:




